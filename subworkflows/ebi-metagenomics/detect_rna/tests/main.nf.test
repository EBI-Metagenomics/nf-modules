nextflow_workflow {

    name "Test Subworkflow DETECT_RNA"
    script "../main.nf"
    workflow "DETECT_RNA"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_ebimetagenomics"
    tag "subworkflows/detect_rna"
    tag "infernal"
    tag "infernal/cmsearch"
    tag "infernal/cmscan"
    tag "cmsearchtbloutdeoverlap"
    tag "convertcmscantocmsearch"
    tag "easel"
    tag "easel/eslsfetch"
    tag "extractcoords"
    tag "nf-core/seqkit"
    tag "nf-core/seqkit/split2"
    tag "nf-core/cat"
    tag "nf-core/cat/cat"

    setup {
        nfcoreInitialise("${launchDir}/library/")
        nfcoreInstall(
            "${launchDir}/library/",
            [
                "seqkit/split2",
                "cat/cat",
            ]
        )
        nfcoreLink("${launchDir}/library/", "${baseDir}/modules/")
    }

    test("test_detect_rna cmsearch") {

        when {
            params {
                rfam = "${moduleDir}/tests/rfam"
                rfam_clan = "${moduleDir}/tests/ribo.claninfo"
            }
            workflow {
                """
                input[0] = Channel.of( [ [ id:'test', single_end:true ], // meta map
                    file('${moduleDir}/tests/test.fasta.gz', checkIfExists: true)
                ])
                input[1] = file(params.rfam)
                input[2] = file(params.rfam_clan)
                input[3] = "cmsearch"
                input[4] = false
                input[5] = true
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match() }
            )
        }
        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

    test("test_detect_rna cmscan") {

        when {
            params {
                rfam = "${moduleDir}/tests/rfam"
                rfam_clan = "${moduleDir}/tests/ribo.claninfo"
            }
            workflow {
                """
                input[0] = Channel.of( [ [ id:'test', single_end:true ], // meta map
                    file('${moduleDir}/tests/test.fasta.gz', checkIfExists: true)
                ])
                input[1] = file(params.rfam)
                input[2] = file(params.rfam_clan)
                input[3] = "cmscan"
                input[4] = false
                input[5] = true
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match() }
            )
        }
        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }

    test("test_no_chunking_for_amplicon") {

        when {
            params {
                rfam = "${moduleDir}/tests/rfam"
                rfam_clan = "${moduleDir}/tests/ribo.claninfo"
            }
            workflow {
                """
                input[0] = Channel.of( [ [ id:'test', single_end:false ], // meta map
                    file('${moduleDir}/tests/test.fasta.gz', checkIfExists: true)
                ])
                input[1] = file(params.rfam)
                input[2] = file(params.rfam_clan)
                input[3] = "cmsearch"
                input[4] = true
                input[5] = false
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match() }
            )
        }
        cleanup {
            nfcoreUnlink("${launchDir}/library/", "${baseDir}/modules/nf-core")
        }
    }
}
