#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2025 EMBL - European Bioinformatics Institute
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
from collections import Counter
import csv

TAXON_PREFIXES = {5: "sk__", 6: "p__", 7: "c__", 8: "o__", 9: "f__", 10: "g__", 11: "s__"}


def main():
    parser = argparse.ArgumentParser(
        description="Process TSV classification generated by CAT_pack add_names and write input file for Krona ktImportText"
        )
    parser.add_argument('-i', '--cat-output', help="Path to the input TSV file from CAT_pack add_names")
    parser.add_argument('-o', '--krona-txt', help="Name of the output Krona TXT file")
    args = parser.parse_args()

    lineage_counter = Counter()

    with open(args.cat_output) as infile:
        reader = csv.reader(infile, delimiter='\t')
        next(reader)  # Skip the header row
        for row in reader:
            if row[1] == "no taxid assigned":
                lineage = "unclassified"
            # TODO clean up this logic:
            # If the sixth column (superkingdom) is 'NA' classify as unclassified
            # It's the case when protein got classificated as environmental sample type, e.g. 'gut metagenome'
            elif row[5] == "NA":
                lineage = "unclassified"
            else:
                taxon_parts = []
                for i in range(5, 12):
                    if "no support" not in row[i]:
                        if row[i] == "NA":
                            taxon = ""
                        else:
                            # Remove numeric scores (e.g., ': 1.00')
                            last_colon_index = row[i].rfind(':')
                            taxon = row[i][:last_colon_index].rstrip("*")
                        taxon_parts.append(TAXON_PREFIXES[i] + taxon)
                lineage = "\t".join(taxon_parts) if taxon_parts else "unclassified"
            lineage_counter[lineage] += 1

    with open(args.krona_txt, "w") as outfile:
        for lineage, count in lineage_counter.items():
            outfile.write(f"{count}\t{lineage}\n")

if __name__ == "__main__":
    main()
